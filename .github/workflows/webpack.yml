name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main
      - ci/cd
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          echo "PG_DATABASE=ocovoit" >> .env
          echo "PG_USER=admin" >> .env
          echo "PG_PASSWORD=ocovoit" >> .env
          echo "PG_HOST=user-db" >> .env
          echo "PG_PORT=5432" >> .env
          echo "DATABASE_URL=postgres://admin:ocovoit@user-db:5432/ocovoit" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SCRYPT_SECRET=${{ secrets.SCRYPT_SECRET }}" >> .env
          echo "MONGO_URL=mongodb://business-db:27017/business-db" >> .env

      - name: Build and start services
        run: |
          docker-compose build
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          docker-compose run --rm api-users /bin/sh -c './wait-for-it.sh user-db:5432 -- echo "user-db is up"'

      # On installe les dépendances et on lance les tests pour api-users
      - name: Install dependencies and run tests for api-users
        run: |
          docker-compose run --rm api-users /bin/sh -c '
              npm ci
              npm run build
              npm run test
            '

      - name: Tear down services
        run: docker-compose down

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service:
          [api-users, api-authentication, api-authorisation, api-business]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/${{ matrix.service }}
          push: false
          tags: user/${{ matrix.service }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying services to production..."
          # Ajoutez ici vos étapes de déploiement pour chaque service
